apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: user-db-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: standard-rwo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-db-configmap
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS `user-db`;
    use `user-db`;
    DROP TABLE IF EXISTS `user`;
    CREATE TABLE user (
      id INT AUTO_INCREMENT PRIMARY KEY,
      username VARCHAR(255) UNIQUE NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      hashed_password VARCHAR(255) NOT NULL,
      created_at TIMESTAMP NOT NULL,
      updated_at TIMESTAMP
    );
---
apiVersion: v1
kind: Service
metadata:
  name: user-db-svc
spec:
  type: ClusterIP
  selector:
    app: user-db
  ports:
    - port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db-deployment
  labels:
    app: user-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-db
  template:
    metadata:
      labels:
        app: user-db
    spec:
      containers:
        - name: user-db
          image: mysql:8.0
          ports:
            - containerPort: 3306
          # TODO: Move env variables to a Secret and ConfigMap object
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
          volumeMounts:
            - name: user-db-initdb # The name of the volume (specified in volumes section below)
              mountPath: /docker-entrypoint-initdb.d # The path within the container where the volume will be mounted
            - name: user-db-persistent-storage
              mountPath: /var/lib/mysql
      volumes: # Specify the volume to be used in the Pod
        - name: user-db-initdb
          configMap:
            name: user-db-configmap
        - name: user-db-persistent-storage
          persistentVolumeClaim:
            claimName: user-db-pvc
